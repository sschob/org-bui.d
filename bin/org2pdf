#!/usr/bin/env sh
":"; exec emacs --quick --script "$0" -- "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-
;;; bin/export_lecture


;;; Code:
;;;
;;;
;;;

(defun usage()
   (with-temp-buffer
    (insert (format "%s %s [OPTIONS] [SRC_FILE]\n"
                    "[1mUsage:[0m"
                    (file-name-nondirectory load-file-name))
            "A command line interface for exporting org-mode files to beamer."
            "\n"
            "[1mOptions:[0m\n"
            "  -t --tex \tExport with latex backend\n"
            "  -H --header FILE \tHeader file\n"
            "  -o --output FILENAME \tOutput file name\n")
    (princ (buffer-string))) )


(defun orgb-export-buffer-beamer (type filename &optional header_file header_func)
  (let ((old-buffer (current-buffer))
        (outfile (format "%s.%s" (file-name-sans-extension filename) "tex" )))
    (with-temp-buffer
      (if header_func
          (funcall header_func))
      (if header_file
          (insert (format "#+include: %s\n" header_file)))
      (insert-buffer-substring old-buffer)
      (org-export-to-file type outfile nil nil nil nil nil
                          (lambda (outfile) (org-latex-compile outfile))))))


;; main
(setq working_dir (concat (getenv-internal "PWD") "/"))
(setq this-file-dir  (file-name-directory load-file-name))

(setq type 'beamer)

(let (src-file header-file output-file)
  (pop argv)
  (while argv
    (let ((arg (pop argv)))
      (pcase arg
        ((or "-h" "--help")
         (usage)
         (error ""))
        ((or "-o" "--output")
         (setq output-file (pop argv)))
        ((or "-t" "--tex")
         (setq type 'latex))
        ((or "-H" "--header")
         (setq header-file (pop argv)))
        ((guard (file-exists-p arg))
         (setq src-file arg))
        (_ (error "Unknown option or file: %s" arg)))))

  (unless (or (not header-file) (file-exists-p header-file))
    (print ("Header-file does not exist"))
    )

  (unless src-file
    (progn
      (print "Missing argument src file")
      (error)))

  (unless output-file
    (setq output-file (format "%s.%s" (file-name-sans-extension src-file) "pdf" )))

  (setq output-file (concat working_dir  output-file))

  (if header-file
      (setq header-file (concat working_dir  header-file))
    )

  (load-file (concat this-file-dir "../init.el"))
  (find-file src-file)
  (orgb-export-buffer-beamer type output-file header-file))

(kill-emacs 0)

;;; org2pdf ends here
